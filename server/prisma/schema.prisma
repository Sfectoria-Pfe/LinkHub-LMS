// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(uuid())
  fname           String
  lname           String
  email           String             @unique
  password        String
  role            Role               @default(apprenant)
  profile_picture String             @default("")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdMessages Message[]          @relation("sentMessages")
  conversations   ConversationUser[]

  @@map("users")
}

model Message {
  id             Int           @id @default(autoincrement())
  message        String
  author         User          @relation("sentMessages", fields: [authorId], references: [id])
  authorId       String
  created_at     DateTime      @default(now())
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int?
  isEdited       Boolean       @default(false)
}

model Conversation {
  id              Int                @id @default(autoincrement())
  title           String?
  messages        Message[]
  created_at      DateTime           @default(now())
  dateLastMessage DateTime?
  participants    ConversationUser[]
}

model ConversationUser {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  isRead         Boolean      @default(true)
}

enum Role {
  apprenant
  formateur
  ADMIN
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  attachment  Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Chapters  Chapter[]
  Purchase  Purchase[]
  review    Review[]

  @@index([categoryId])
  @@map("courses")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Courses   Course[]

  @@map("categories")
}

model Attachment {
  id        String   @id @default(uuid())
  courseId  String
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@map("attachments")
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?

  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id])
  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  Chapter     Chapter  @relation(fields: [chapterId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String?
  Course    Course?  @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([courseId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("reviews")
}

model ChatBoot {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chatBoots")
}
